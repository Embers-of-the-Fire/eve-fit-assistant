// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'api/data.dart';
import 'api/error.dart';
import 'api/proxy.dart';
import 'api/schema.dart';
import 'api/simple.dart';
import 'api/validate/post_validate/charge.dart';
import 'api/validate/post_validate/max_activate.dart';
import 'api/validate/pre_validate/fit_target.dart';
import 'api/validate/pre_validate/rig_size.dart';
import 'api/validate/pre_validate/slot_num.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.8.0';

  @override
  int get rustContentHash => -1688554001;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_eve_fit_assistant',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  int crateApiValidatePostValidateChargeAttrAmmoCap();

  I32Array5 crateApiValidatePostValidateChargeAttrChargeGroups();

  int crateApiValidatePostValidateChargeAttrChargeSize();

  int crateApiValidatePreValidateSlotNumAttrLauncher();

  int crateApiValidatePreValidateSlotNumAttrSubsystemLauncher();

  int crateApiValidatePreValidateSlotNumAttrSubsystemTurret();

  int crateApiValidatePreValidateSlotNumAttrTurret();

  int crateApiValidatePostValidateChargeAttrVolume();

  I32Array20 crateApiValidatePreValidateFitTargetCanFitGroupAttrIds();

  I32Array11 crateApiValidatePreValidateFitTargetCanFitTypeAttrIds();

  int crateApiValidatePreValidateSlotNumEffectLauncher();

  int crateApiValidatePreValidateSlotNumEffectTurret();

  Future<EveDatabase> crateApiDataEveDatabaseInit(
      {required List<int> dogmaAttrBuffer,
      required List<int> dogmaEffectBuffer,
      required List<int> typeDogmaBuffer,
      required List<int> typesBuffer,
      required List<int> buffCollectionsBuffer});

  int crateApiValidatePostValidateMaxActivateMaxActivateAttrId();

  int crateApiValidatePreValidateRigSizeRigSizeAttrId();

  CalculateOutput crateApiCalculate(
      {required EveDatabase db, required Fit fit});

  Map<int, double> crateApiGetTypeAttr(
      {required EveDatabase db, required int typeId});

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  Future<ModulesProxy> crateApiProxyModulesProxyDefault();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EveDatabase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EveDatabase;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EveDatabasePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  int crateApiValidatePostValidateChargeAttrAmmoCap() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiValidatePostValidateChargeAttrAmmoCapConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiValidatePostValidateChargeAttrAmmoCapConstMeta =>
      const TaskConstMeta(
        debugName: "ATTR_AMMO_CAP",
        argNames: [],
      );

  @override
  I32Array5 crateApiValidatePostValidateChargeAttrChargeGroups() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiValidatePostValidateChargeAttrChargeGroupsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiValidatePostValidateChargeAttrChargeGroupsConstMeta =>
          const TaskConstMeta(
            debugName: "ATTR_CHARGE_GROUPS",
            argNames: [],
          );

  @override
  int crateApiValidatePostValidateChargeAttrChargeSize() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiValidatePostValidateChargeAttrChargeSizeConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiValidatePostValidateChargeAttrChargeSizeConstMeta =>
          const TaskConstMeta(
            debugName: "ATTR_CHARGE_SIZE",
            argNames: [],
          );

  @override
  int crateApiValidatePreValidateSlotNumAttrLauncher() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiValidatePreValidateSlotNumAttrLauncherConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiValidatePreValidateSlotNumAttrLauncherConstMeta =>
      const TaskConstMeta(
        debugName: "ATTR_LAUNCHER",
        argNames: [],
      );

  @override
  int crateApiValidatePreValidateSlotNumAttrSubsystemLauncher() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiValidatePreValidateSlotNumAttrSubsystemLauncherConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiValidatePreValidateSlotNumAttrSubsystemLauncherConstMeta =>
          const TaskConstMeta(
            debugName: "ATTR_SUBSYSTEM_LAUNCHER",
            argNames: [],
          );

  @override
  int crateApiValidatePreValidateSlotNumAttrSubsystemTurret() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiValidatePreValidateSlotNumAttrSubsystemTurretConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiValidatePreValidateSlotNumAttrSubsystemTurretConstMeta =>
          const TaskConstMeta(
            debugName: "ATTR_SUBSYSTEM_TURRET",
            argNames: [],
          );

  @override
  int crateApiValidatePreValidateSlotNumAttrTurret() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiValidatePreValidateSlotNumAttrTurretConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiValidatePreValidateSlotNumAttrTurretConstMeta =>
      const TaskConstMeta(
        debugName: "ATTR_TURRET",
        argNames: [],
      );

  @override
  int crateApiValidatePostValidateChargeAttrVolume() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiValidatePostValidateChargeAttrVolumeConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiValidatePostValidateChargeAttrVolumeConstMeta =>
      const TaskConstMeta(
        debugName: "ATTR_VOLUME",
        argNames: [],
      );

  @override
  I32Array20 crateApiValidatePreValidateFitTargetCanFitGroupAttrIds() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32_array_20,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiValidatePreValidateFitTargetCanFitGroupAttrIdsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiValidatePreValidateFitTargetCanFitGroupAttrIdsConstMeta =>
          const TaskConstMeta(
            debugName: "CAN_FIT_GROUP_ATTR_IDS",
            argNames: [],
          );

  @override
  I32Array11 crateApiValidatePreValidateFitTargetCanFitTypeAttrIds() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32_array_11,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiValidatePreValidateFitTargetCanFitTypeAttrIdsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiValidatePreValidateFitTargetCanFitTypeAttrIdsConstMeta =>
          const TaskConstMeta(
            debugName: "CAN_FIT_TYPE_ATTR_IDS",
            argNames: [],
          );

  @override
  int crateApiValidatePreValidateSlotNumEffectLauncher() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiValidatePreValidateSlotNumEffectLauncherConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiValidatePreValidateSlotNumEffectLauncherConstMeta =>
          const TaskConstMeta(
            debugName: "EFFECT_LAUNCHER",
            argNames: [],
          );

  @override
  int crateApiValidatePreValidateSlotNumEffectTurret() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiValidatePreValidateSlotNumEffectTurretConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiValidatePreValidateSlotNumEffectTurretConstMeta =>
      const TaskConstMeta(
        debugName: "EFFECT_TURRET",
        argNames: [],
      );

  @override
  Future<EveDatabase> crateApiDataEveDatabaseInit(
      {required List<int> dogmaAttrBuffer,
      required List<int> dogmaEffectBuffer,
      required List<int> typeDogmaBuffer,
      required List<int> typesBuffer,
      required List<int> buffCollectionsBuffer}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(dogmaAttrBuffer, serializer);
        sse_encode_list_prim_u_8_loose(dogmaEffectBuffer, serializer);
        sse_encode_list_prim_u_8_loose(typeDogmaBuffer, serializer);
        sse_encode_list_prim_u_8_loose(typesBuffer, serializer);
        sse_encode_list_prim_u_8_loose(buffCollectionsBuffer, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEveDatabase,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDataEveDatabaseInitConstMeta,
      argValues: [
        dogmaAttrBuffer,
        dogmaEffectBuffer,
        typeDogmaBuffer,
        typesBuffer,
        buffCollectionsBuffer
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDataEveDatabaseInitConstMeta =>
      const TaskConstMeta(
        debugName: "EveDatabase_init",
        argNames: [
          "dogmaAttrBuffer",
          "dogmaEffectBuffer",
          "typeDogmaBuffer",
          "typesBuffer",
          "buffCollectionsBuffer"
        ],
      );

  @override
  int crateApiValidatePostValidateMaxActivateMaxActivateAttrId() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiValidatePostValidateMaxActivateMaxActivateAttrIdConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiValidatePostValidateMaxActivateMaxActivateAttrIdConstMeta =>
          const TaskConstMeta(
            debugName: "MAX_ACTIVATE_ATTR_ID",
            argNames: [],
          );

  @override
  int crateApiValidatePreValidateRigSizeRigSizeAttrId() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiValidatePreValidateRigSizeRigSizeAttrIdConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiValidatePreValidateRigSizeRigSizeAttrIdConstMeta =>
      const TaskConstMeta(
        debugName: "RIG_SIZE_ATTR_ID",
        argNames: [],
      );

  @override
  CalculateOutput crateApiCalculate(
      {required EveDatabase db, required Fit fit}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEveDatabase(
            db, serializer);
        sse_encode_box_autoadd_fit(fit, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_calculate_output,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCalculateConstMeta,
      argValues: [db, fit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCalculateConstMeta => const TaskConstMeta(
        debugName: "calculate",
        argNames: ["db", "fit"],
      );

  @override
  Map<int, double> crateApiGetTypeAttr(
      {required EveDatabase db, required int typeId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEveDatabase(
            db, serializer);
        sse_encode_i_32(typeId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiGetTypeAttrConstMeta,
      argValues: [db, typeId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiGetTypeAttrConstMeta => const TaskConstMeta(
        debugName: "get_type_attr",
        argNames: ["db", "typeId"],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<ModulesProxy> crateApiProxyModulesProxyDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_modules_proxy,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProxyModulesProxyDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProxyModulesProxyDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "modules_proxy_default",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EveDatabase => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEveDatabase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EveDatabase => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEveDatabase;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  EveDatabase
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEveDatabase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EveDatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EveDatabase
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEveDatabase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EveDatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<int, DynamicItem> dco_decode_Map_i_32_dynamic_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_i_32_dynamic_item(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, double> dco_decode_Map_i_32_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_f_64(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> dco_decode_Map_i_32_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_u_8(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  EveDatabase
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEveDatabase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EveDatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Booster dco_decode_booster(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Booster(
      itemId: dco_decode_i_32(arr[0]),
      index: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  ErrorKey dco_decode_box_autoadd_error_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_error_key(raw);
  }

  @protected
  Fit dco_decode_box_autoadd_fit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_fit(raw);
  }

  @protected
  int dco_decode_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Item dco_decode_box_autoadd_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_item(raw);
  }

  @protected
  ItemProxy dco_decode_box_autoadd_item_proxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_item_proxy(raw);
  }

  @protected
  WarningKey dco_decode_box_autoadd_warning_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_warning_key(raw);
  }

  @protected
  ItemProxy dco_decode_box_item_proxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_item_proxy(raw);
  }

  @protected
  CalculateOutput dco_decode_calculate_output(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CalculateOutput(
      ship: dco_decode_ship_proxy(arr[0]),
      errors: dco_decode_list_slot_info(arr[1]),
    );
  }

  @protected
  DamageProfile dco_decode_damage_profile(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DamageProfile(
      em: dco_decode_f_64(arr[0]),
      explosive: dco_decode_f_64(arr[1]),
      kinetic: dco_decode_f_64(arr[2]),
      thermal: dco_decode_f_64(arr[3]),
    );
  }

  @protected
  DroneGroup dco_decode_drone_group(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return DroneGroup(
      itemId: dco_decode_i_32(arr[0]),
      amount: dco_decode_i_32(arr[1]),
      index: dco_decode_u_8(arr[2]),
    );
  }

  @protected
  DroneProxy dco_decode_drone_proxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DroneProxy(
      groupIndex: dco_decode_u_8(arr[0]),
      drones: dco_decode_list_item_proxy(arr[1]),
    );
  }

  @protected
  DynamicItem dco_decode_dynamic_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DynamicItem(
      baseType: dco_decode_i_32(arr[0]),
      dynamicAttributes: dco_decode_Map_i_32_f_64(arr[1]),
    );
  }

  @protected
  ErrorKey dco_decode_error_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ErrorKey_IncompatibleChargeSize(
          expected: dco_decode_u_8(raw[1]),
          actual: dco_decode_u_8(raw[2]),
        );
      case 1:
        return ErrorKey_IncompatibleChargeCapacity(
          max: dco_decode_f_64(raw[1]),
          actual: dco_decode_f_64(raw[2]),
        );
      case 2:
        return ErrorKey_TooMuchTurret(
          expected: dco_decode_u_8(raw[1]),
          actual: dco_decode_u_8(raw[2]),
        );
      case 3:
        return ErrorKey_TooMuchLauncher(
          expected: dco_decode_u_8(raw[1]),
          actual: dco_decode_u_8(raw[2]),
        );
      case 4:
        return ErrorKey_ConflictItem(
          groupId: dco_decode_i_32(raw[1]),
        );
      case 5:
        return ErrorKey_IncompatibleShipGroup(
          expected: dco_decode_list_prim_i_32_strict(raw[1]),
        );
      case 6:
        return ErrorKey_IncompatibleShipType(
          expected: dco_decode_list_prim_i_32_strict(raw[1]),
        );
      case 7:
        return ErrorKey_IncompatibleRigSize(
          expected: dco_decode_u_8(raw[1]),
          actual: dco_decode_u_8(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FighterGroup dco_decode_fighter_group(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return FighterGroup(
      itemId: dco_decode_i_32(arr[0]),
      amount: dco_decode_i_32(arr[1]),
      index: dco_decode_u_8(arr[2]),
      ability: dco_decode_u_8(arr[3]),
    );
  }

  @protected
  FighterProxy dco_decode_fighter_proxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FighterProxy(
      groupIndex: dco_decode_u_8(arr[0]),
      fighters: dco_decode_list_item_proxy(arr[1]),
    );
  }

  @protected
  Fit dco_decode_fit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return Fit(
      shipId: dco_decode_i_32(arr[0]),
      modules: dco_decode_module(arr[1]),
      drones: dco_decode_list_drone_group(arr[2]),
      fighters: dco_decode_list_fighter_group(arr[3]),
      implants: dco_decode_list_implant(arr[4]),
      boosters: dco_decode_list_booster(arr[5]),
      skills: dco_decode_Map_i_32_u_8(arr[6]),
      damageProfile: dco_decode_damage_profile(arr[7]),
      dynamicItems: dco_decode_Map_i_32_dynamic_item(arr[8]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  I32Array11 dco_decode_i_32_array_11(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return I32Array11(dco_decode_list_prim_i_32_strict(raw));
  }

  @protected
  I32Array20 dco_decode_i_32_array_20(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return I32Array20(dco_decode_list_prim_i_32_strict(raw));
  }

  @protected
  I32Array5 dco_decode_i_32_array_5(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return I32Array5(dco_decode_list_prim_i_32_strict(raw));
  }

  @protected
  Implant dco_decode_implant(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Implant(
      itemId: dco_decode_i_32(arr[0]),
      index: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  Item dco_decode_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Item(
      itemId: dco_decode_i_32(arr[0]),
      isDynamic: dco_decode_bool(arr[1]),
      charge: dco_decode_opt_box_autoadd_i_32(arr[2]),
      state: dco_decode_item_state(arr[3]),
      index: dco_decode_i_32(arr[4]),
    );
  }

  @protected
  ItemProxy dco_decode_item_proxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return ItemProxy(
      index: dco_decode_opt_box_autoadd_i_32(arr[0]),
      itemId: dco_decode_i_32(arr[1]),
      isDynamic: dco_decode_bool(arr[2]),
      charge: dco_decode_opt_box_item_proxy(arr[3]),
      attributes: dco_decode_Map_i_32_f_64(arr[4]),
      isActive: dco_decode_bool(arr[5]),
    );
  }

  @protected
  ItemState dco_decode_item_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ItemState.values[raw as int];
  }

  @protected
  List<Booster> dco_decode_list_booster(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_booster).toList();
  }

  @protected
  List<DroneGroup> dco_decode_list_drone_group(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_drone_group).toList();
  }

  @protected
  List<DroneProxy> dco_decode_list_drone_proxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_drone_proxy).toList();
  }

  @protected
  List<FighterGroup> dco_decode_list_fighter_group(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_fighter_group).toList();
  }

  @protected
  List<FighterProxy> dco_decode_list_fighter_proxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_fighter_proxy).toList();
  }

  @protected
  List<Implant> dco_decode_list_implant(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_implant).toList();
  }

  @protected
  List<Item> dco_decode_list_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_item).toList();
  }

  @protected
  List<ItemProxy> dco_decode_list_item_proxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_item_proxy).toList();
  }

  @protected
  Int32List dco_decode_list_prim_i_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Int32List;
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(int, DynamicItem)> dco_decode_list_record_i_32_dynamic_item(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_dynamic_item)
        .toList();
  }

  @protected
  List<(int, double)> dco_decode_list_record_i_32_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_f_64).toList();
  }

  @protected
  List<(int, int)> dco_decode_list_record_i_32_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_u_8).toList();
  }

  @protected
  List<SlotInfo> dco_decode_list_slot_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_slot_info).toList();
  }

  @protected
  Module dco_decode_module(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Module(
      high: dco_decode_list_item(arr[0]),
      medium: dco_decode_list_item(arr[1]),
      low: dco_decode_list_item(arr[2]),
      rig: dco_decode_list_item(arr[3]),
      subsystem: dco_decode_list_item(arr[4]),
      tacticalMode: dco_decode_opt_box_autoadd_item(arr[5]),
    );
  }

  @protected
  ModulesProxy dco_decode_modules_proxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return ModulesProxy(
      high: dco_decode_list_item_proxy(arr[0]),
      medium: dco_decode_list_item_proxy(arr[1]),
      low: dco_decode_list_item_proxy(arr[2]),
      rig: dco_decode_list_item_proxy(arr[3]),
      subsystem: dco_decode_list_item_proxy(arr[4]),
      tacticalMode: dco_decode_opt_box_autoadd_item_proxy(arr[5]),
      drones: dco_decode_list_drone_proxy(arr[6]),
      fighters: dco_decode_list_fighter_proxy(arr[7]),
    );
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_32(raw);
  }

  @protected
  Item? dco_decode_opt_box_autoadd_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_item(raw);
  }

  @protected
  ItemProxy? dco_decode_opt_box_autoadd_item_proxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_item_proxy(raw);
  }

  @protected
  ItemProxy? dco_decode_opt_box_item_proxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_item_proxy(raw);
  }

  @protected
  (int, DynamicItem) dco_decode_record_i_32_dynamic_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_dynamic_item(arr[1]),
    );
  }

  @protected
  (int, double) dco_decode_record_i_32_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_f_64(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_i_32_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_u_8(arr[1]),
    );
  }

  @protected
  ShipProxy dco_decode_ship_proxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return ShipProxy(
      hull: dco_decode_item_proxy(arr[0]),
      modules: dco_decode_modules_proxy(arr[1]),
      implants: dco_decode_list_item_proxy(arr[2]),
      boosters: dco_decode_list_item_proxy(arr[3]),
      character: dco_decode_item_proxy(arr[4]),
      damageProfile: dco_decode_damage_profile(arr[5]),
    );
  }

  @protected
  SlotInfo dco_decode_slot_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SlotInfo_Error(
          slot: dco_decode_slot_type(raw[1]),
          index: dco_decode_opt_box_autoadd_i_32(raw[2]),
          errorKey: dco_decode_box_autoadd_error_key(raw[3]),
        );
      case 1:
        return SlotInfo_Warning(
          slot: dco_decode_slot_type(raw[1]),
          index: dco_decode_opt_box_autoadd_i_32(raw[2]),
          warningKey: dco_decode_box_autoadd_warning_key(raw[3]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SlotType dco_decode_slot_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SlotType.values[raw as int];
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  WarningKey dco_decode_warning_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return WarningKey_MissingCharge();
      case 1:
        return WarningKey_Placeholder(
          dco_decode_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  EveDatabase
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEveDatabase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EveDatabaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EveDatabase
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEveDatabase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EveDatabaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Map<int, DynamicItem> sse_decode_Map_i_32_dynamic_item(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_dynamic_item(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, double> sse_decode_Map_i_32_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_f_64(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_u_8(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  EveDatabase
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEveDatabase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EveDatabaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Booster sse_decode_booster(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_itemId = sse_decode_i_32(deserializer);
    var var_index = sse_decode_i_32(deserializer);
    return Booster(itemId: var_itemId, index: var_index);
  }

  @protected
  ErrorKey sse_decode_box_autoadd_error_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_error_key(deserializer));
  }

  @protected
  Fit sse_decode_box_autoadd_fit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_fit(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_32(deserializer));
  }

  @protected
  Item sse_decode_box_autoadd_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_item(deserializer));
  }

  @protected
  ItemProxy sse_decode_box_autoadd_item_proxy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_item_proxy(deserializer));
  }

  @protected
  WarningKey sse_decode_box_autoadd_warning_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_warning_key(deserializer));
  }

  @protected
  ItemProxy sse_decode_box_item_proxy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_item_proxy(deserializer));
  }

  @protected
  CalculateOutput sse_decode_calculate_output(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_ship = sse_decode_ship_proxy(deserializer);
    var var_errors = sse_decode_list_slot_info(deserializer);
    return CalculateOutput(ship: var_ship, errors: var_errors);
  }

  @protected
  DamageProfile sse_decode_damage_profile(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_em = sse_decode_f_64(deserializer);
    var var_explosive = sse_decode_f_64(deserializer);
    var var_kinetic = sse_decode_f_64(deserializer);
    var var_thermal = sse_decode_f_64(deserializer);
    return DamageProfile(
        em: var_em,
        explosive: var_explosive,
        kinetic: var_kinetic,
        thermal: var_thermal);
  }

  @protected
  DroneGroup sse_decode_drone_group(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_itemId = sse_decode_i_32(deserializer);
    var var_amount = sse_decode_i_32(deserializer);
    var var_index = sse_decode_u_8(deserializer);
    return DroneGroup(itemId: var_itemId, amount: var_amount, index: var_index);
  }

  @protected
  DroneProxy sse_decode_drone_proxy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_groupIndex = sse_decode_u_8(deserializer);
    var var_drones = sse_decode_list_item_proxy(deserializer);
    return DroneProxy(groupIndex: var_groupIndex, drones: var_drones);
  }

  @protected
  DynamicItem sse_decode_dynamic_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_baseType = sse_decode_i_32(deserializer);
    var var_dynamicAttributes = sse_decode_Map_i_32_f_64(deserializer);
    return DynamicItem(
        baseType: var_baseType, dynamicAttributes: var_dynamicAttributes);
  }

  @protected
  ErrorKey sse_decode_error_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_expected = sse_decode_u_8(deserializer);
        var var_actual = sse_decode_u_8(deserializer);
        return ErrorKey_IncompatibleChargeSize(
            expected: var_expected, actual: var_actual);
      case 1:
        var var_max = sse_decode_f_64(deserializer);
        var var_actual = sse_decode_f_64(deserializer);
        return ErrorKey_IncompatibleChargeCapacity(
            max: var_max, actual: var_actual);
      case 2:
        var var_expected = sse_decode_u_8(deserializer);
        var var_actual = sse_decode_u_8(deserializer);
        return ErrorKey_TooMuchTurret(
            expected: var_expected, actual: var_actual);
      case 3:
        var var_expected = sse_decode_u_8(deserializer);
        var var_actual = sse_decode_u_8(deserializer);
        return ErrorKey_TooMuchLauncher(
            expected: var_expected, actual: var_actual);
      case 4:
        var var_groupId = sse_decode_i_32(deserializer);
        return ErrorKey_ConflictItem(groupId: var_groupId);
      case 5:
        var var_expected = sse_decode_list_prim_i_32_strict(deserializer);
        return ErrorKey_IncompatibleShipGroup(expected: var_expected);
      case 6:
        var var_expected = sse_decode_list_prim_i_32_strict(deserializer);
        return ErrorKey_IncompatibleShipType(expected: var_expected);
      case 7:
        var var_expected = sse_decode_u_8(deserializer);
        var var_actual = sse_decode_u_8(deserializer);
        return ErrorKey_IncompatibleRigSize(
            expected: var_expected, actual: var_actual);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  FighterGroup sse_decode_fighter_group(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_itemId = sse_decode_i_32(deserializer);
    var var_amount = sse_decode_i_32(deserializer);
    var var_index = sse_decode_u_8(deserializer);
    var var_ability = sse_decode_u_8(deserializer);
    return FighterGroup(
        itemId: var_itemId,
        amount: var_amount,
        index: var_index,
        ability: var_ability);
  }

  @protected
  FighterProxy sse_decode_fighter_proxy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_groupIndex = sse_decode_u_8(deserializer);
    var var_fighters = sse_decode_list_item_proxy(deserializer);
    return FighterProxy(groupIndex: var_groupIndex, fighters: var_fighters);
  }

  @protected
  Fit sse_decode_fit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_shipId = sse_decode_i_32(deserializer);
    var var_modules = sse_decode_module(deserializer);
    var var_drones = sse_decode_list_drone_group(deserializer);
    var var_fighters = sse_decode_list_fighter_group(deserializer);
    var var_implants = sse_decode_list_implant(deserializer);
    var var_boosters = sse_decode_list_booster(deserializer);
    var var_skills = sse_decode_Map_i_32_u_8(deserializer);
    var var_damageProfile = sse_decode_damage_profile(deserializer);
    var var_dynamicItems = sse_decode_Map_i_32_dynamic_item(deserializer);
    return Fit(
        shipId: var_shipId,
        modules: var_modules,
        drones: var_drones,
        fighters: var_fighters,
        implants: var_implants,
        boosters: var_boosters,
        skills: var_skills,
        damageProfile: var_damageProfile,
        dynamicItems: var_dynamicItems);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  I32Array11 sse_decode_i_32_array_11(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_i_32_strict(deserializer);
    return I32Array11(inner);
  }

  @protected
  I32Array20 sse_decode_i_32_array_20(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_i_32_strict(deserializer);
    return I32Array20(inner);
  }

  @protected
  I32Array5 sse_decode_i_32_array_5(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_i_32_strict(deserializer);
    return I32Array5(inner);
  }

  @protected
  Implant sse_decode_implant(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_itemId = sse_decode_i_32(deserializer);
    var var_index = sse_decode_i_32(deserializer);
    return Implant(itemId: var_itemId, index: var_index);
  }

  @protected
  Item sse_decode_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_itemId = sse_decode_i_32(deserializer);
    var var_isDynamic = sse_decode_bool(deserializer);
    var var_charge = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_state = sse_decode_item_state(deserializer);
    var var_index = sse_decode_i_32(deserializer);
    return Item(
        itemId: var_itemId,
        isDynamic: var_isDynamic,
        charge: var_charge,
        state: var_state,
        index: var_index);
  }

  @protected
  ItemProxy sse_decode_item_proxy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_index = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_itemId = sse_decode_i_32(deserializer);
    var var_isDynamic = sse_decode_bool(deserializer);
    var var_charge = sse_decode_opt_box_item_proxy(deserializer);
    var var_attributes = sse_decode_Map_i_32_f_64(deserializer);
    var var_isActive = sse_decode_bool(deserializer);
    return ItemProxy(
        index: var_index,
        itemId: var_itemId,
        isDynamic: var_isDynamic,
        charge: var_charge,
        attributes: var_attributes,
        isActive: var_isActive);
  }

  @protected
  ItemState sse_decode_item_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ItemState.values[inner];
  }

  @protected
  List<Booster> sse_decode_list_booster(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Booster>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_booster(deserializer));
    }
    return ans_;
  }

  @protected
  List<DroneGroup> sse_decode_list_drone_group(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DroneGroup>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_drone_group(deserializer));
    }
    return ans_;
  }

  @protected
  List<DroneProxy> sse_decode_list_drone_proxy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DroneProxy>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_drone_proxy(deserializer));
    }
    return ans_;
  }

  @protected
  List<FighterGroup> sse_decode_list_fighter_group(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FighterGroup>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_fighter_group(deserializer));
    }
    return ans_;
  }

  @protected
  List<FighterProxy> sse_decode_list_fighter_proxy(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FighterProxy>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_fighter_proxy(deserializer));
    }
    return ans_;
  }

  @protected
  List<Implant> sse_decode_list_implant(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Implant>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_implant(deserializer));
    }
    return ans_;
  }

  @protected
  List<Item> sse_decode_list_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Item>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_item(deserializer));
    }
    return ans_;
  }

  @protected
  List<ItemProxy> sse_decode_list_item_proxy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ItemProxy>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_item_proxy(deserializer));
    }
    return ans_;
  }

  @protected
  Int32List sse_decode_list_prim_i_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt32List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(int, DynamicItem)> sse_decode_list_record_i_32_dynamic_item(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, DynamicItem)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_dynamic_item(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, double)> sse_decode_list_record_i_32_f_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, double)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_f_64(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_u_8(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_u_8(deserializer));
    }
    return ans_;
  }

  @protected
  List<SlotInfo> sse_decode_list_slot_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SlotInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_slot_info(deserializer));
    }
    return ans_;
  }

  @protected
  Module sse_decode_module(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_high = sse_decode_list_item(deserializer);
    var var_medium = sse_decode_list_item(deserializer);
    var var_low = sse_decode_list_item(deserializer);
    var var_rig = sse_decode_list_item(deserializer);
    var var_subsystem = sse_decode_list_item(deserializer);
    var var_tacticalMode = sse_decode_opt_box_autoadd_item(deserializer);
    return Module(
        high: var_high,
        medium: var_medium,
        low: var_low,
        rig: var_rig,
        subsystem: var_subsystem,
        tacticalMode: var_tacticalMode);
  }

  @protected
  ModulesProxy sse_decode_modules_proxy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_high = sse_decode_list_item_proxy(deserializer);
    var var_medium = sse_decode_list_item_proxy(deserializer);
    var var_low = sse_decode_list_item_proxy(deserializer);
    var var_rig = sse_decode_list_item_proxy(deserializer);
    var var_subsystem = sse_decode_list_item_proxy(deserializer);
    var var_tacticalMode = sse_decode_opt_box_autoadd_item_proxy(deserializer);
    var var_drones = sse_decode_list_drone_proxy(deserializer);
    var var_fighters = sse_decode_list_fighter_proxy(deserializer);
    return ModulesProxy(
        high: var_high,
        medium: var_medium,
        low: var_low,
        rig: var_rig,
        subsystem: var_subsystem,
        tacticalMode: var_tacticalMode,
        drones: var_drones,
        fighters: var_fighters);
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Item? sse_decode_opt_box_autoadd_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_item(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ItemProxy? sse_decode_opt_box_autoadd_item_proxy(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_item_proxy(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ItemProxy? sse_decode_opt_box_item_proxy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_item_proxy(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (int, DynamicItem) sse_decode_record_i_32_dynamic_item(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_dynamic_item(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, double) sse_decode_record_i_32_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_f_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_u_8(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  ShipProxy sse_decode_ship_proxy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_hull = sse_decode_item_proxy(deserializer);
    var var_modules = sse_decode_modules_proxy(deserializer);
    var var_implants = sse_decode_list_item_proxy(deserializer);
    var var_boosters = sse_decode_list_item_proxy(deserializer);
    var var_character = sse_decode_item_proxy(deserializer);
    var var_damageProfile = sse_decode_damage_profile(deserializer);
    return ShipProxy(
        hull: var_hull,
        modules: var_modules,
        implants: var_implants,
        boosters: var_boosters,
        character: var_character,
        damageProfile: var_damageProfile);
  }

  @protected
  SlotInfo sse_decode_slot_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_slot = sse_decode_slot_type(deserializer);
        var var_index = sse_decode_opt_box_autoadd_i_32(deserializer);
        var var_errorKey = sse_decode_box_autoadd_error_key(deserializer);
        return SlotInfo_Error(
            slot: var_slot, index: var_index, errorKey: var_errorKey);
      case 1:
        var var_slot = sse_decode_slot_type(deserializer);
        var var_index = sse_decode_opt_box_autoadd_i_32(deserializer);
        var var_warningKey = sse_decode_box_autoadd_warning_key(deserializer);
        return SlotInfo_Warning(
            slot: var_slot, index: var_index, warningKey: var_warningKey);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SlotType sse_decode_slot_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SlotType.values[inner];
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  WarningKey sse_decode_warning_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return WarningKey_MissingCharge();
      case 1:
        var var_field0 = sse_decode_i_32(deserializer);
        return WarningKey_Placeholder(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEveDatabase(
          EveDatabase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EveDatabaseImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEveDatabase(
          EveDatabase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EveDatabaseImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_Map_i_32_dynamic_item(
      Map<int, DynamicItem> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_dynamic_item(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_f_64(
      Map<int, double> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_f_64(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_u_8(Map<int, int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_u_8(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEveDatabase(
          EveDatabase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EveDatabaseImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_booster(Booster self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.itemId, serializer);
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_box_autoadd_error_key(
      ErrorKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_error_key(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_fit(Fit self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_fit(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_item(Item self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_item(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_item_proxy(
      ItemProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_item_proxy(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_warning_key(
      WarningKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_warning_key(self, serializer);
  }

  @protected
  void sse_encode_box_item_proxy(ItemProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_item_proxy(self, serializer);
  }

  @protected
  void sse_encode_calculate_output(
      CalculateOutput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ship_proxy(self.ship, serializer);
    sse_encode_list_slot_info(self.errors, serializer);
  }

  @protected
  void sse_encode_damage_profile(DamageProfile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.em, serializer);
    sse_encode_f_64(self.explosive, serializer);
    sse_encode_f_64(self.kinetic, serializer);
    sse_encode_f_64(self.thermal, serializer);
  }

  @protected
  void sse_encode_drone_group(DroneGroup self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.itemId, serializer);
    sse_encode_i_32(self.amount, serializer);
    sse_encode_u_8(self.index, serializer);
  }

  @protected
  void sse_encode_drone_proxy(DroneProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.groupIndex, serializer);
    sse_encode_list_item_proxy(self.drones, serializer);
  }

  @protected
  void sse_encode_dynamic_item(DynamicItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.baseType, serializer);
    sse_encode_Map_i_32_f_64(self.dynamicAttributes, serializer);
  }

  @protected
  void sse_encode_error_key(ErrorKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ErrorKey_IncompatibleChargeSize(
          expected: final expected,
          actual: final actual
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_u_8(expected, serializer);
        sse_encode_u_8(actual, serializer);
      case ErrorKey_IncompatibleChargeCapacity(
          max: final max,
          actual: final actual
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(max, serializer);
        sse_encode_f_64(actual, serializer);
      case ErrorKey_TooMuchTurret(
          expected: final expected,
          actual: final actual
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_u_8(expected, serializer);
        sse_encode_u_8(actual, serializer);
      case ErrorKey_TooMuchLauncher(
          expected: final expected,
          actual: final actual
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_u_8(expected, serializer);
        sse_encode_u_8(actual, serializer);
      case ErrorKey_ConflictItem(groupId: final groupId):
        sse_encode_i_32(4, serializer);
        sse_encode_i_32(groupId, serializer);
      case ErrorKey_IncompatibleShipGroup(expected: final expected):
        sse_encode_i_32(5, serializer);
        sse_encode_list_prim_i_32_strict(expected, serializer);
      case ErrorKey_IncompatibleShipType(expected: final expected):
        sse_encode_i_32(6, serializer);
        sse_encode_list_prim_i_32_strict(expected, serializer);
      case ErrorKey_IncompatibleRigSize(
          expected: final expected,
          actual: final actual
        ):
        sse_encode_i_32(7, serializer);
        sse_encode_u_8(expected, serializer);
        sse_encode_u_8(actual, serializer);
    }
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_fighter_group(FighterGroup self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.itemId, serializer);
    sse_encode_i_32(self.amount, serializer);
    sse_encode_u_8(self.index, serializer);
    sse_encode_u_8(self.ability, serializer);
  }

  @protected
  void sse_encode_fighter_proxy(FighterProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.groupIndex, serializer);
    sse_encode_list_item_proxy(self.fighters, serializer);
  }

  @protected
  void sse_encode_fit(Fit self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.shipId, serializer);
    sse_encode_module(self.modules, serializer);
    sse_encode_list_drone_group(self.drones, serializer);
    sse_encode_list_fighter_group(self.fighters, serializer);
    sse_encode_list_implant(self.implants, serializer);
    sse_encode_list_booster(self.boosters, serializer);
    sse_encode_Map_i_32_u_8(self.skills, serializer);
    sse_encode_damage_profile(self.damageProfile, serializer);
    sse_encode_Map_i_32_dynamic_item(self.dynamicItems, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_32_array_11(I32Array11 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_32_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_i_32_array_20(I32Array20 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_32_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_i_32_array_5(I32Array5 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_32_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_implant(Implant self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.itemId, serializer);
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_item(Item self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.itemId, serializer);
    sse_encode_bool(self.isDynamic, serializer);
    sse_encode_opt_box_autoadd_i_32(self.charge, serializer);
    sse_encode_item_state(self.state, serializer);
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_item_proxy(ItemProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.index, serializer);
    sse_encode_i_32(self.itemId, serializer);
    sse_encode_bool(self.isDynamic, serializer);
    sse_encode_opt_box_item_proxy(self.charge, serializer);
    sse_encode_Map_i_32_f_64(self.attributes, serializer);
    sse_encode_bool(self.isActive, serializer);
  }

  @protected
  void sse_encode_item_state(ItemState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_list_booster(List<Booster> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_booster(item, serializer);
    }
  }

  @protected
  void sse_encode_list_drone_group(
      List<DroneGroup> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_drone_group(item, serializer);
    }
  }

  @protected
  void sse_encode_list_drone_proxy(
      List<DroneProxy> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_drone_proxy(item, serializer);
    }
  }

  @protected
  void sse_encode_list_fighter_group(
      List<FighterGroup> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_fighter_group(item, serializer);
    }
  }

  @protected
  void sse_encode_list_fighter_proxy(
      List<FighterProxy> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_fighter_proxy(item, serializer);
    }
  }

  @protected
  void sse_encode_list_implant(List<Implant> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_implant(item, serializer);
    }
  }

  @protected
  void sse_encode_list_item(List<Item> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_item(item, serializer);
    }
  }

  @protected
  void sse_encode_list_item_proxy(
      List<ItemProxy> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_item_proxy(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_i_32_strict(
      Int32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt32List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_i_32_dynamic_item(
      List<(int, DynamicItem)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_dynamic_item(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_f_64(
      List<(int, double)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_f_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_u_8(
      List<(int, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_u_8(item, serializer);
    }
  }

  @protected
  void sse_encode_list_slot_info(
      List<SlotInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_slot_info(item, serializer);
    }
  }

  @protected
  void sse_encode_module(Module self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_item(self.high, serializer);
    sse_encode_list_item(self.medium, serializer);
    sse_encode_list_item(self.low, serializer);
    sse_encode_list_item(self.rig, serializer);
    sse_encode_list_item(self.subsystem, serializer);
    sse_encode_opt_box_autoadd_item(self.tacticalMode, serializer);
  }

  @protected
  void sse_encode_modules_proxy(ModulesProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_item_proxy(self.high, serializer);
    sse_encode_list_item_proxy(self.medium, serializer);
    sse_encode_list_item_proxy(self.low, serializer);
    sse_encode_list_item_proxy(self.rig, serializer);
    sse_encode_list_item_proxy(self.subsystem, serializer);
    sse_encode_opt_box_autoadd_item_proxy(self.tacticalMode, serializer);
    sse_encode_list_drone_proxy(self.drones, serializer);
    sse_encode_list_fighter_proxy(self.fighters, serializer);
  }

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_item(Item? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_item(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_item_proxy(
      ItemProxy? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_item_proxy(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_item_proxy(
      ItemProxy? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_item_proxy(self, serializer);
    }
  }

  @protected
  void sse_encode_record_i_32_dynamic_item(
      (int, DynamicItem) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_dynamic_item(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_f_64(
      (int, double) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_f_64(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_u_8((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_u_8(self.$2, serializer);
  }

  @protected
  void sse_encode_ship_proxy(ShipProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_item_proxy(self.hull, serializer);
    sse_encode_modules_proxy(self.modules, serializer);
    sse_encode_list_item_proxy(self.implants, serializer);
    sse_encode_list_item_proxy(self.boosters, serializer);
    sse_encode_item_proxy(self.character, serializer);
    sse_encode_damage_profile(self.damageProfile, serializer);
  }

  @protected
  void sse_encode_slot_info(SlotInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SlotInfo_Error(
          slot: final slot,
          index: final index,
          errorKey: final errorKey
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_slot_type(slot, serializer);
        sse_encode_opt_box_autoadd_i_32(index, serializer);
        sse_encode_box_autoadd_error_key(errorKey, serializer);
      case SlotInfo_Warning(
          slot: final slot,
          index: final index,
          warningKey: final warningKey
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_slot_type(slot, serializer);
        sse_encode_opt_box_autoadd_i_32(index, serializer);
        sse_encode_box_autoadd_warning_key(warningKey, serializer);
    }
  }

  @protected
  void sse_encode_slot_type(SlotType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_warning_key(WarningKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case WarningKey_MissingCharge():
        sse_encode_i_32(0, serializer);
      case WarningKey_Placeholder(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_i_32(field0, serializer);
    }
  }
}

@sealed
class EveDatabaseImpl extends RustOpaque implements EveDatabase {
  // Not to be used by end users
  EveDatabaseImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EveDatabaseImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_EveDatabase,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_EveDatabase,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_EveDatabasePtr,
  );
}
