// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'error.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`

/// This function is used to force the frb to generate error defs.
Future<SlotError> errorEcho({required SlotError err}) =>
    RustLib.instance.api.crateApiErrorErrorEcho(err: err);

@freezed
sealed class ErrorKey with _$ErrorKey {
  const ErrorKey._();

  const factory ErrorKey.incompatibleCharge({
    required int charge,
  }) = ErrorKey_IncompatibleCharge;
}

@freezed
class SlotError with _$SlotError {
  const factory SlotError({
    required SlotType slot,
    required int index,
    required ErrorKey errorKey,
  }) = _SlotError;
}

enum SlotType {
  high,
  medium,
  low,
  rig,
  subsystem,
  implant,
  drone,
  ;
}
